services:
  # MinIO
  minio:
    container_name: minio
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio:/data
    command: minio server /data --console-address ":9001" 
    healthcheck:
      test: mc ready local
      interval: 15s
      timeout: 5s
      retries: 1
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 200M
        reservations:
          cpus: "0.025"
          memory: 50M
  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
        restart: false
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/mlflow;
      exit 0;
      "
  # PostgreSQL
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - ./pg:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
      interval: 15s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
        reservations:
          cpus: "0.01"
          memory: 6M
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=80
      - GUNICORN_THREADS=1
    ports:
      - "15432:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 150M
        reservations:
          cpus: "0.025"
          memory: 50M
  # LABELBOX
  nginx:
    container_name: label-studio-nginx
    build: .
    image: heartexlabs/label-studio:latest
    restart: unless-stopped
    ports:
      - "8080:8085"
      - "8081:8086"
    depends_on:
      - app
    environment:
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}
    volumes:
      - label-studio:/label-studio/data:rw
    command: nginx
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 10M
        reservations:
          cpus: "0.01"
          memory: 6M
  app: # nginx expects this to be called app
    container_name: label-studio-app
    stdin_open: true
    tty: true
    build: .
    image: heartexlabs/label-studio:latest
    restart: unless-stopped
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    environment:
      - DJANGO_DB=default
      - POSTGRE_NAME=labelstudio
      - POSTGRE_USER=${POSTGRES_USER}
      - POSTGRE_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRE_PORT=${POSTGRES_PORT}
      - POSTGRE_HOST=${POSTGRES_HOST}
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}
      - JSON_LOG=1
      - UWSGI_PROCESSES=1
    volumes:
      - label-studio:/label-studio/data:rw
    command: label-studio-uwsgi
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 250M
        reservations:
          cpus: "0.025"
          memory: 50M
  # MLFLOW
  mlflow:
    container_name: mlflow
    restart: always
    image: ghcr.io/mlflow/mlflow:latest
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true
    environment:
      - GUNICORN_THREADS=1
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    ports:
      - "5001:5001"
    command: >
      bash -c "pip install psycopg2-binary && 
      mlflow server --artifacts-destination s3://mlflow --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/mlflowdb --workers 2 --port 5001 --host 0.0.0.0"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 400M
        reservations:
          cpus: "0.025"
          memory: 50M

volumes:
  label-studio:
  minio:
  postgres:
  pgadmin:
